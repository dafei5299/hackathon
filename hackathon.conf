# 配置环境变量
lua_package_path    "/data/app/hackathon/?.lua;;/usr/local/openresty/lualib/?.lua;;";

# 配置启动初始化操作
init_by_lua_file      /data/app/hackathon/init.lua;

# 初始化高速缓存
lua_shared_dict     ngxcache    50m;

upstream agent {
    server 10.88.105.88:8686;
    server 10.88.105.89:8686; 
    server 192.168.254.91:8686; 
    server 192.168.255.166:8686; 
    server 10.88.101.15:8686; 
    server 10.88.101.16:8686; 
}

#引入healthcheck模块配置（注意配置upstream名字，多个upstream需要配置多个）
#include /data/app/hackathon/resource/healthcheck.conf;

# hc模块专用
lua_shared_dict     healthcheck    1m;

#init_worker_by_lua_block {
#    local hc = require "resty.upstream.healthcheck"
#    local ok, err = hc.spawn_checker{
#        shm = "healthcheck",  -- defined by "lua_shared_dict"
#        upstream = "agent", -- defined by "upstream"
#        type = "http",
#        http_req = "GET / HTTP/1.0\r\nHost: qunar.com\r\n\r\n",  -- raw HTTP request for checking
#        interval = 2000,  -- run the check cycle every 2 sec
#        timeout = 1000,   -- 1秒超时
#        fall = 3,  -- # 失败3次关闭
#        rise = 2,  -- # 成功两次开启
#        valid_statuses = {200, 302},  -- 正确的http状态码
#        concurrency = 10,  -- 测试请求的并发级别
#    }
#    if not ok then
#        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
#        return
#    end
#}


server {
    # 基本端口域名配置
    default_type    text/html;
    listen          80;
    #server_name    localhost;

    # 默认编码
    charset utf-8;

    # 设置项目目录
    set $base_path  /data/app/hackathon;

    # 日志记录配置
    access_log  logs/access.log;
    error_log       logs/error.log  error;
    log_not_found   off;

    location ~ /verifycode\.html {
        root $base_path/interface;
    }

    location ~ /interface/(\w+) {
        access_by_lua_file  $base_path/interface/$1.lua;
    }

    # 透明转发设置
    location / {
        access_by_lua_file  $base_path/index.lua;
        proxy_pass  http://openapi.test.com;
        proxy_set_header  Host             $host;
        proxy_set_header  X-Real-Scheme    $scheme;
        proxy_set_header  X-Real-IP        $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
    
    # healthcheck健康检查
    location = /status {
        access_log off;
        default_type text/plain;
        content_by_lua_block {
            local hc = require "resty.upstream.healthcheck"
            ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
        }
    }

    # 设置本地共享内存--写、读、删
    location ~ /(get|set|all) {
        set $api $1;
        access_by_lua_file $base_path/lib/cache/cache.lua;
    }
}